% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_int.R
\name{sample_int}
\alias{sample_int}
\title{Random Samples and Permutations}
\usage{
sample_int(
  n,
  size = NULL,
  replace = FALSE,
  prob = NULL,
  useHash = (n > 1e+07 && !replace && is.null(prob) && (!is.null(size)) && size <= n/2),
  method = c("sequential", "marginal", "poisson")
)
}
\arguments{
\item{n}{A positive number, the number of items to choose from. See "Details."}

\item{size}{A non-negative integer giving the number of items to
choose. The default is \code{n} except for unequal-probability sampling
without replacement, where it is \code{sum(prob)}.}

\item{replace}{Should sampling be with replacement?}

\item{prob}{A vector of probability weights for obtaining the elements
of the vector being sampled.}

\item{useHash}{Logical indicating if the hash-version of
the algorithm should be used. Can only be used for \code{replace = FALSE},
\code{prob = NULL}, and \code{size <= n/2}, and really should be used for large \code{n},
as \code{useHash=FALSE} will use memory proportional to \code{n}.}

\item{method}{When \code{replace=FALSE} and \code{prob} is not \code{NULL}, the
method to use for sampling, see Details below.}
}
\value{
an integer vector of length \code{size} with
elements from \code{1:n}, or a double vector if
\eqn{n \ge 2^{31}}{n >= 2^31}.
}
\description{
\code{sample_int} takes a sample of the specified size from \code{1:n} using either with or without replacement.
}
\details{
It is allowed to ask for \code{size = 0} samples with \code{n = 0} or
a length-zero \code{x}, but otherwise \code{n > 0} or positive
\code{length(x)} is required.

Non-integer positive numerical values of \code{n} will be
truncated to the next smallest integer, which has to be no larger than
\code{.Machine$integer.max}.

The optional \code{prob} argument can be used to give a vector of
weights for obtaining the elements of the vector being sampled.
They need not sum to one, but they should be non-negative and not all zero.
If \code{replace} is true, Walker's alias method (Ripley, 1987) is
used when there are more than 200 reasonably probable values: this
gives results incompatible with those from R < 2.2.0.

If \code{replace} is false and \code{prob} is supplied there are three
options, controlled by \code{method}. The number of nonzero weights
must be at least \code{size} in this case and the weights should sum
to the desired sample size.

All three of the methods have disadvantages. The default,
compatible with R < 4.4.0 is sequential sampling also know as the Yat, that
is,  the probability of choosing the next item is proportional to the
weights amongst the remaining items. Sequential sampling is fast,
\emph{but the probability of being sampled is not equal or
proportional to \code{prob}}. Using \code{"marginal"}
draws a sample so that the inclusion probabilities are the values of
\code{prob} and by default \code{size=sum(prob)}. It uses the Brewer procedures, Algorithm
6.10 from Tille (2006). This is much slower for large \code{n}
than the other methods.  Finally, \code{"poisson"} does Poisson
sampling, where the inclusion probabilities are the values of
\code{prob} but the \emph{sample size is random} with mean \code{size}
rather than being fixed at \code{size}; it is most useful when
\code{size} is large and the variability is thus relatively small.
}
\examples{
## R 3.0.0 and later
sample_int(1e10, 12, replace = TRUE)
sample_int(1e10, 12) # not that there is much chance of duplicates

## R 4.4.0 and later
### Sequential sampling does not give the specified inclusion probability
}
\references{
Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988)
\emph{The New S Language}.
Wadsworth & Brooks/Cole.

Ripley, B. D. (1987) \emph{Stochastic Simulation}. Wiley.

Tille, Y (2006) \emph{Sampling Algorithms} Springer.
}
\seealso{
\code{RNGkind(sample.kind = ..)} about random number generation,
notably the change of \code{sample()} results with R version 3.6.0.

CRAN package \code{sampling} for other methods of weighted sampling
without replacement.
}
